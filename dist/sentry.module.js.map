{"version":3,"file":"sentry.module.js","sourceRoot":"/","sources":["sentry.module.ts"],"names":[],"mappings":";;;;;;;;;;AAAA,2CAAiE;AACjE,mDAAsE;AACtE,qDAAiD;AACjD,yDAA6F;AAItF,IAAM,YAAY,oBAAlB,MAAM,YAAY;IAChB,MAAM,CAAC,OAAO,CAAC,OAA4B;QAChD,MAAM,cAAc,GAAG,IAAA,uCAAoB,EAAC,OAAO,CAAC,CAAC;QACrD,MAAM,2BAA2B,GAAG,IAAA,oDAAiC,EAAC,OAAO,CAAC,CAAC;QAC/E,OAAO;YACL,MAAM,EAAE,IAAI;YACZ,MAAM,EAAE,cAAY;YACpB,SAAS,EAAE,CAAC,2BAA2B,EAAE,cAAc,EAAE,8BAAa,CAAC;YACvE,OAAO,EAAE,CAAC,cAAc,EAAE,8BAAa,CAAC;SACzC,CAAC;IACJ,CAAC;IAEM,MAAM,CAAC,YAAY,CAAC,OAAiC;QAC1D,MAAM,QAAQ,GAAa;YACzB,MAAM,EAAE,CAAC,qCAAqB,CAAC;YAC/B,OAAO,EAAE,4BAAY;YACrB,UAAU,EAAE,CAAC,OAA4B,EAAE,EAAE,CAAC,IAAI,8BAAa,CAAC,OAAO,CAAC;SACzE,CAAC;QAEF,OAAO;YACL,MAAM,EAAE,IAAI;YACZ,MAAM,EAAE,cAAY;YACpB,OAAO,EAAE,OAAO,CAAC,OAAO,IAAI,EAAE;YAC9B,SAAS,EAAE,CAAC,GAAG,IAAI,CAAC,oBAAoB,CAAC,OAAO,CAAC,EAAE,QAAQ,EAAE,8BAAa,CAAC;YAC3E,OAAO,EAAE,CAAC,QAAQ,EAAE,8BAAa,CAAC;SACnC,CAAC;IACJ,CAAC;IAEO,MAAM,CAAC,oBAAoB,CAAC,OAAiC;QACnE,IAAI,OAAO,CAAC,WAAW,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;YAC9C,OAAO,CAAC,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC,CAAC,CAAC;QACpD,CAAC;QACD,OAAO;YACL,IAAI,CAAC,0BAA0B,CAAC,OAAO,CAAC;YACxC;gBACE,OAAO,EAAE,OAAO,CAAC,QAAQ;gBACzB,QAAQ,EAAE,OAAO,CAAC,QAAQ;aAC3B;SACF,CAAC;IACJ,CAAC;IAEO,MAAM,CAAC,0BAA0B,CAAC,OAAiC;QACzE,IAAI,OAAO,CAAC,UAAU,EAAE,CAAC;YACvB,OAAO;gBACL,MAAM,EAAE,OAAO,CAAC,MAAM,IAAI,EAAE;gBAC5B,OAAO,EAAE,qCAAqB;gBAC9B,UAAU,EAAE,OAAO,CAAC,UAAU;aAC/B,CAAC;QACJ,CAAC;QACD,OAAO;YACL,OAAO,EAAE,qCAAqB;YAC9B,UAAU,EAAE,KAAK,EAAE,cAAoC,EAAE,EAAE,CACzD,MAAM,cAAc,CAAC,yBAAyB,EAAE;YAClD,MAAM,EAAE,CAAC,OAAO,CAAC,QAAQ,IAAI,OAAO,CAAC,WAAW,CAAC;SAClD,CAAC;IACJ,CAAC;CACF,CAAA;AAxDY,oCAAY;uBAAZ,YAAY;IADxB,IAAA,eAAM,EAAC,EAAE,CAAC;GACE,YAAY,CAwDxB","sourcesContent":["import { Module, Provider, DynamicModule } from '@nestjs/common';\nimport { SENTRY_MODULE_OPTIONS, SENTRY_TOKEN } from './sentry.tokens';\nimport { SentryService } from './sentry.service';\nimport { createSentryModuleOptionsProvider, createSentryProvider } from './sentry.providers';\nimport { SentryModuleAsyncOptions, SentryModuleOptions, SentryOptionsFactory } from './interfaces';\n\n@Module({})\nexport class SentryModule {\n  public static forRoot(options: SentryModuleOptions): DynamicModule {\n    const sentryProvider = createSentryProvider(options);\n    const sentryModuleOptionsProvider = createSentryModuleOptionsProvider(options);\n    return {\n      global: true,\n      module: SentryModule,\n      providers: [sentryModuleOptionsProvider, sentryProvider, SentryService],\n      exports: [sentryProvider, SentryService],\n    };\n  }\n\n  public static forRootAsync(options: SentryModuleAsyncOptions): DynamicModule {\n    const provider: Provider = {\n      inject: [SENTRY_MODULE_OPTIONS],\n      provide: SENTRY_TOKEN,\n      useFactory: (options: SentryModuleOptions) => new SentryService(options),\n    };\n\n    return {\n      global: true,\n      module: SentryModule,\n      imports: options.imports || [],\n      providers: [...this.createAsyncProviders(options), provider, SentryService],\n      exports: [provider, SentryService],\n    };\n  }\n\n  private static createAsyncProviders(options: SentryModuleAsyncOptions): Provider[] {\n    if (options.useExisting || options.useFactory) {\n      return [this.createAsyncOptionsProvider(options)];\n    }\n    return [\n      this.createAsyncOptionsProvider(options),\n      {\n        provide: options.useClass,\n        useClass: options.useClass,\n      },\n    ];\n  }\n\n  private static createAsyncOptionsProvider(options: SentryModuleAsyncOptions): Provider {\n    if (options.useFactory) {\n      return {\n        inject: options.inject || [],\n        provide: SENTRY_MODULE_OPTIONS,\n        useFactory: options.useFactory,\n      };\n    }\n    return {\n      provide: SENTRY_MODULE_OPTIONS,\n      useFactory: async (optionsFactory: SentryOptionsFactory) =>\n        await optionsFactory.createSentryModuleOptions(),\n      inject: [options.useClass || options.useExisting],\n    };\n  }\n}\n"]}