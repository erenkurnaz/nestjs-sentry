{"version":3,"file":"sentry.interceptor.js","sourceRoot":"/","sources":["sentry.interceptor.ts"],"names":[],"mappings":"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","sourcesContent":["import { CallHandler, ExecutionContext, HttpException, Injectable, NestInterceptor } from '@nestjs/common';\nimport { HttpArgumentsHost, WsArgumentsHost, RpcArgumentsHost, ContextType } from '@nestjs/common/interfaces';\nimport { Observable } from 'rxjs';\nimport { tap } from 'rxjs/operators';\nimport { Scope } from '@sentry/core';\nimport { addRequestDataToEvent } from '@sentry/node';\n\nimport { SentryService } from './sentry.service';\nimport { SentryInterceptorOptions, SentryInterceptorOptionsFilter } from './interfaces';\nimport { isStringArray } from './utils';\nimport { isInstantiableType } from './utils/is-instantiable-type';\n\n@Injectable()\nexport class SentryInterceptor implements NestInterceptor {\n  protected readonly client: SentryService = SentryService.SentryServiceInstance();\n  constructor(private readonly options?: SentryInterceptorOptions) {}\n\n  public intercept(context: ExecutionContext, next: CallHandler): Observable<unknown> {\n    return next.handle().pipe(\n      tap({\n        error: (exception: HttpException | Error) => {\n          if (this.shouldReport(exception)) {\n            this.client.instance().withScope((scope) => this.captureException(context, scope, exception));\n          }\n        },\n      }),\n    );\n  }\n\n  public shouldReport(exception: unknown) {\n    if (!this.options || !this.options.filters) return true;\n\n    const filters: SentryInterceptorOptionsFilter[] = this.options.filters;\n\n    return filters.some(({ type, filter }) => {\n      if (isStringArray(type) && exception instanceof Error) {\n        return !type.some((type) => exception.message.includes(type)) && (!filter || filter(exception));\n      }\n\n      return !(isInstantiableType(type) && exception instanceof type && (!filter || filter(exception)));\n    });\n  }\n\n  public captureException(context: ExecutionContext, scope: Scope, exception: unknown) {\n    switch (context.getType<ContextType>()) {\n      case 'http':\n        return this.captureHttpException(scope, context.switchToHttp(), exception);\n      case 'rpc':\n        return this.captureRpcException(scope, context.switchToRpc(), exception);\n      case 'ws':\n        return this.captureWsException(scope, context.switchToWs(), exception);\n    }\n  }\n\n  private captureHttpException(scope: Scope, http: HttpArgumentsHost, exception: unknown): void {\n    const data = addRequestDataToEvent({}, http.getRequest(), { include: { ...this.options?.include } });\n\n    scope.setExtra('req', data.request);\n\n    if (data.extra) scope.setExtras(data.extra);\n    if (data.user) scope.setUser(data.user);\n\n    this.client.instance().captureException(exception);\n  }\n\n  private captureRpcException(scope: Scope, rpc: RpcArgumentsHost, exception: unknown): void {\n    scope.setExtra('rpc_data', rpc.getData());\n\n    this.client.instance().captureException(exception);\n  }\n\n  private captureWsException(scope: Scope, ws: WsArgumentsHost, exception: unknown): void {\n    scope.setExtra('ws_client', ws.getClient());\n    scope.setExtra('ws_data', ws.getData());\n\n    this.client.instance().captureException(exception);\n  }\n}\n"]}