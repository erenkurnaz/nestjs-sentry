{"version":3,"file":"sentry.module.spec.js","sourceRoot":"/","sources":["__tests__/sentry.module.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { Module } from '@nestjs/common';\nimport { Test } from '@nestjs/testing';\n\nimport { SentryModule } from '../sentry.module';\nimport { SentryModuleOptions, SentryOptionsFactory } from '../interfaces';\nimport { SentryService } from '../sentry.service';\nimport { SENTRY_TOKEN } from '../sentry.tokens';\n\ndescribe('SentryModule', () => {\n  const CONFIG: SentryModuleOptions = {\n    dsn: 'https://xxx.ingest.sentry.io/xxx',\n    debug: true,\n    environment: 'development',\n    loggerOptions: {\n      logLevels: ['debug'],\n    },\n  };\n\n  class TestService implements SentryOptionsFactory {\n    createSentryModuleOptions(): SentryModuleOptions {\n      return CONFIG;\n    }\n  }\n\n  @Module({\n    exports: [TestService],\n    providers: [TestService],\n  })\n  class TestModule {}\n\n  describe('Static Initialization: forRoot', () => {\n    it('should provide the sentry client', async () => {\n      const mod = await Test.createTestingModule({\n        imports: [SentryModule.forRoot(CONFIG)],\n      }).compile();\n\n      const sentry = mod.get<SentryService>(SENTRY_TOKEN);\n      expect(sentry).toBeDefined();\n      expect(sentry).toBeInstanceOf(SentryService);\n    });\n  });\n\n  describe('Dynamic Initialization: forRootAsync', () => {\n    describe('when the `useFactory` option is used', () => {\n      it('should provide sentry client', async () => {\n        const mod = await Test.createTestingModule({\n          imports: [\n            SentryModule.forRootAsync({\n              useFactory: () => CONFIG,\n            }),\n          ],\n        }).compile();\n\n        const sentry = mod.get<SentryService>(SENTRY_TOKEN);\n        expect(sentry).toBeDefined();\n        expect(sentry).toBeInstanceOf(SentryService);\n      });\n    });\n\n    describe('when the `useClass` option is used', () => {\n      it('should provide the sentry client', async () => {\n        const mod = await Test.createTestingModule({\n          imports: [\n            SentryModule.forRootAsync({\n              useClass: TestService,\n            }),\n          ],\n        }).compile();\n\n        const sentry = mod.get<SentryService>(SENTRY_TOKEN);\n        expect(sentry).toBeDefined();\n        expect(sentry).toBeInstanceOf(SentryService);\n      });\n    });\n\n    describe('when the `useExisting` option is used', () => {\n      it('should provide the stripe client', async () => {\n        const mod = await Test.createTestingModule({\n          imports: [\n            SentryModule.forRootAsync({\n              imports: [TestModule],\n              useExisting: TestService,\n            }),\n          ],\n        }).compile();\n\n        const sentry = mod.get<SentryService>(SENTRY_TOKEN);\n        expect(sentry).toBeDefined();\n        expect(sentry).toBeInstanceOf(SentryService);\n      });\n    });\n  });\n});\n"]}