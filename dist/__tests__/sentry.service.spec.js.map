{"version":3,"file":"sentry.service.spec.js","sourceRoot":"/","sources":["__tests__/sentry.service.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { Logger } from '@nestjs/common';\nimport { Test, TestingModule } from '@nestjs/testing';\nimport * as Sentry from '@sentry/node';\n\nimport { SentryService } from '../sentry.service';\nimport { SentryModuleOptions } from '../interfaces';\nimport { SentryModule } from '../sentry.module';\n\ndescribe('SentryService', () => {\n  let MODULE: TestingModule;\n  let SERVICE: SentryService;\n  let LOGGER: Logger;\n\n  beforeAll(async () => {\n    LOGGER = new Logger();\n    const options: SentryModuleOptions = {\n      dsn: 'https://sentry_io_dsn@sentry.io/1512xxx',\n      logger: LOGGER,\n    };\n\n    MODULE = await Test.createTestingModule({\n      imports: [SentryModule.forRoot(options)],\n    }).compile();\n\n    SERVICE = MODULE.get<SentryService>(SentryService);\n  });\n\n  afterEach(async () => {\n    jest.clearAllMocks();\n    await SERVICE.instance().flush();\n    await MODULE.close();\n  });\n\n  describe('Sentry.init', () => {\n    it('should call Sentry.init with the options', () => {\n      const spy = jest.spyOn(Sentry, 'init');\n      new SentryService({\n        dsn: 'https://sentry_io_dsn@sentry.io/1512xxx',\n        logger: LOGGER,\n        integrations: [],\n      });\n\n      expect(spy).toHaveBeenCalledWith(\n        expect.objectContaining({\n          dsn: 'https://sentry_io_dsn@sentry.io/1512xxx',\n          integrations: expect.arrayContaining([\n            expect.objectContaining({ name: 'OnUncaughtException' }),\n            expect.objectContaining({ name: 'OnUnhandledRejection' }),\n          ]),\n        }),\n      );\n      expect(spy).toHaveBeenCalledTimes(1);\n    });\n\n    it('should call logger.fatal when an uncaught exception occurs', async () => {\n      const processSpy = jest.spyOn(process, 'exit').mockImplementation();\n      const spy = jest.spyOn(LOGGER, 'fatal');\n      const error = new Error('Uncaught exception');\n\n      process.nextTick(() => process.emit('uncaughtException', error));\n      await new Promise((resolve) => setImmediate(resolve));\n\n      expect(spy).toHaveBeenCalledWith(error);\n      expect(processSpy).toHaveBeenCalledWith(1);\n    });\n  });\n\n  describe('service:log', () => {\n    it('should prefix the message if prefix option is set', async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          SentryModule.forRoot({\n            dsn: 'https://sentry_io_dsn@sentry.io/1512xxx',\n            prefix: 'prefix',\n          }),\n        ],\n      }).compile();\n      const SENTRY_SERVICE = module.get<SentryService>(SentryService);\n      const spy = jest.spyOn(Sentry, 'captureMessage');\n\n      SENTRY_SERVICE.log('message');\n\n      expect(spy).toHaveBeenCalledWith('prefix: message', 'log');\n      expect(spy).toHaveBeenCalledTimes(1);\n    });\n\n    it('should log the message if logger option is set', () => {\n      const spy = jest.spyOn(LOGGER, 'log');\n\n      SERVICE.log('message', 'context');\n\n      expect(spy).toHaveBeenCalledWith('message', 'context');\n      expect(spy).toHaveBeenCalledTimes(1);\n    });\n\n    it('should add a breadcrumb if asBreadcrumb parameter is true', () => {\n      const spy = jest.spyOn(Sentry, 'addBreadcrumb');\n\n      SERVICE.log('message', 'context', true);\n\n      expect(spy).toHaveBeenCalledWith({\n        message: 'message',\n        level: 'log',\n        data: {\n          context: 'context',\n        },\n      });\n      expect(spy).toHaveBeenCalledTimes(1);\n    });\n\n    it('should capture a message if asBreadcrumb parameter is false', () => {\n      const spy = jest.spyOn(Sentry, 'captureMessage');\n      const breadCrumbSpy = jest.spyOn(Sentry, 'addBreadcrumb');\n\n      SERVICE.log('message', 'context', false);\n\n      expect(spy).toHaveBeenCalledWith('message', 'log');\n      expect(breadCrumbSpy).not.toHaveBeenCalled();\n      expect(spy).toHaveBeenCalledTimes(1);\n    });\n\n    it('should log an error if an exception is thrown', () => {\n      const error = new Error('error');\n      jest.spyOn(Sentry, 'captureMessage').mockImplementation(() => {\n        throw error;\n      });\n      const spy = jest.spyOn(Logger, 'error');\n\n      SERVICE.log('message');\n\n      expect(spy).toHaveBeenCalledWith(error, SentryService.name);\n      expect(spy).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('service:error', () => {\n    it('should prefix the message if prefix option is set', async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          SentryModule.forRoot({\n            dsn: 'https://sentry_io_dsn@sentry.io/1512xxx',\n            prefix: 'prefix',\n          }),\n        ],\n      }).compile();\n      const SENTRY_SERVICE = module.get<SentryService>(SentryService);\n      const spy = jest.spyOn(Sentry, 'captureMessage');\n\n      SENTRY_SERVICE.error('message');\n\n      expect(spy).toHaveBeenCalledWith('prefix: message', 'error');\n      expect(spy).toHaveBeenCalledTimes(1);\n    });\n\n    it('should log the message if logger option is set', () => {\n      const spy = jest.spyOn(LOGGER, 'error');\n\n      SERVICE.error('message', 'trace', 'context');\n\n      expect(spy).toHaveBeenCalledWith('message', 'trace', 'context');\n      expect(spy).toHaveBeenCalledTimes(1);\n    });\n\n    it('should capture an exception if an exception is thrown', () => {\n      const error = new Error('error');\n      jest.spyOn(Sentry, 'captureException').mockImplementation(() => {\n        throw error;\n      });\n      const spy = jest.spyOn(Logger, 'error');\n\n      SERVICE.error('message');\n\n      expect(spy).toHaveBeenCalledWith(error, SentryService.name);\n      expect(spy).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('service:warn', () => {\n    it('should prefix the message if prefix option is set', async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          SentryModule.forRoot({\n            dsn: 'https://sentry_io_dsn@sentry.io/1512xxx',\n            prefix: 'prefix',\n          }),\n        ],\n      }).compile();\n      const SENTRY_SERVICE = module.get<SentryService>(SentryService);\n      const spy = jest.spyOn(Sentry, 'captureMessage');\n\n      SENTRY_SERVICE.warn('message');\n\n      expect(spy).toHaveBeenCalledWith('prefix: message', 'warning');\n      expect(spy).toHaveBeenCalledTimes(1);\n    });\n\n    it('should log the message if logger option is set', () => {\n      const spy = jest.spyOn(LOGGER, 'warn');\n\n      SERVICE.warn('message', 'context');\n\n      expect(spy).toHaveBeenCalledWith('message', 'context');\n      expect(spy).toHaveBeenCalledTimes(1);\n    });\n\n    it('should add a breadcrumb if asBreadcrumb parameter is true', () => {\n      const spy = jest.spyOn(Sentry, 'addBreadcrumb');\n\n      SERVICE.warn('message', 'context', true);\n\n      expect(spy).toHaveBeenCalledWith({\n        message: 'message',\n        level: 'warning',\n        data: {\n          context: 'context',\n        },\n      });\n      expect(spy).toHaveBeenCalledTimes(1);\n    });\n\n    it('should capture a message if asBreadcrumb parameter is false', () => {\n      const spy = jest.spyOn(Sentry, 'captureMessage');\n      const breadCrumbSpy = jest.spyOn(Sentry, 'addBreadcrumb');\n\n      SERVICE.warn('message', 'context', false);\n\n      expect(spy).toHaveBeenCalledWith('message', 'warning');\n      expect(breadCrumbSpy).not.toHaveBeenCalled();\n      expect(spy).toHaveBeenCalledTimes(1);\n    });\n\n    it('should log an error if an exception is thrown', () => {\n      const error = new Error('error');\n      jest.spyOn(Sentry, 'captureMessage').mockImplementation(() => {\n        throw error;\n      });\n      const spy = jest.spyOn(Logger, 'error');\n\n      SERVICE.warn('message');\n\n      expect(spy).toHaveBeenCalledWith(error, SentryService.name);\n      expect(spy).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('service:debug', () => {\n    it('should prefix the message if prefix option is set', async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          SentryModule.forRoot({\n            dsn: 'https://sentry_io_dsn@sentry.io/1512xxx',\n            prefix: 'prefix',\n          }),\n        ],\n      }).compile();\n      const SENTRY_SERVICE = module.get<SentryService>(SentryService);\n      const spy = jest.spyOn(Sentry, 'captureMessage');\n\n      SENTRY_SERVICE.debug('message');\n\n      expect(spy).toHaveBeenCalledWith('prefix: message', 'debug');\n      expect(spy).toHaveBeenCalledTimes(1);\n    });\n\n    it('should log the message if logger option is set', () => {\n      const spy = jest.spyOn(LOGGER, 'debug');\n\n      SERVICE.debug('message', 'context');\n\n      expect(spy).toHaveBeenCalledWith('message', 'context');\n      expect(spy).toHaveBeenCalledTimes(1);\n    });\n\n    it('should add a breadcrumb if asBreadcrumb parameter is true', () => {\n      const spy = jest.spyOn(Sentry, 'addBreadcrumb');\n\n      SERVICE.debug('message', 'context', true);\n\n      expect(spy).toHaveBeenCalledWith({\n        message: 'message',\n        level: 'debug',\n        data: {\n          context: 'context',\n        },\n      });\n      expect(spy).toHaveBeenCalledTimes(1);\n    });\n\n    it('should capture a message if asBreadcrumb parameter is false', () => {\n      const spy = jest.spyOn(Sentry, 'captureMessage');\n      const breadCrumbSpy = jest.spyOn(Sentry, 'addBreadcrumb');\n\n      SERVICE.debug('message', 'context', false);\n\n      expect(spy).toHaveBeenCalledWith('message', 'debug');\n      expect(breadCrumbSpy).not.toHaveBeenCalled();\n      expect(spy).toHaveBeenCalledTimes(1);\n    });\n\n    it('should log an error if an exception is thrown', () => {\n      const error = new Error('error');\n      jest.spyOn(Sentry, 'captureMessage').mockImplementation(() => {\n        throw error;\n      });\n      const spy = jest.spyOn(Logger, 'error');\n\n      SERVICE.debug('message');\n\n      expect(spy).toHaveBeenCalledWith(error, SentryService.name);\n      expect(spy).toHaveBeenCalledTimes(1);\n    });\n  });\n\n  describe('service:verbose', () => {\n    it('should prefix the message if prefix option is set', async () => {\n      const module: TestingModule = await Test.createTestingModule({\n        imports: [\n          SentryModule.forRoot({\n            dsn: 'https://sentry_io_dsn@sentry.io/1512xxx',\n            prefix: 'prefix',\n          }),\n        ],\n      }).compile();\n      const SENTRY_SERVICE = module.get<SentryService>(SentryService);\n      const spy = jest.spyOn(Sentry, 'captureMessage');\n\n      SENTRY_SERVICE.verbose('message');\n\n      expect(spy).toHaveBeenCalledWith('prefix: message', 'info');\n      expect(spy).toHaveBeenCalledTimes(1);\n    });\n\n    it('should log the message if logger option is set', () => {\n      const spy = jest.spyOn(LOGGER, 'verbose');\n\n      SERVICE.verbose('message', 'context');\n\n      expect(spy).toHaveBeenCalledWith('message', 'context');\n      expect(spy).toHaveBeenCalledTimes(1);\n    });\n\n    it('should add a breadcrumb if asBreadcrumb parameter is true', () => {\n      const spy = jest.spyOn(Sentry, 'addBreadcrumb');\n\n      SERVICE.verbose('message', 'context', true);\n\n      expect(spy).toHaveBeenCalledWith({\n        message: 'message',\n        level: 'info',\n        data: {\n          context: 'context',\n        },\n      });\n      expect(spy).toHaveBeenCalledTimes(1);\n    });\n\n    it('should capture a message if asBreadcrumb parameter is false', () => {\n      const spy = jest.spyOn(Sentry, 'captureMessage');\n      const breadCrumbSpy = jest.spyOn(Sentry, 'addBreadcrumb');\n\n      SERVICE.verbose('message', 'context', false);\n\n      expect(spy).toHaveBeenCalledWith('message', 'info');\n      expect(breadCrumbSpy).not.toHaveBeenCalled();\n      expect(spy).toHaveBeenCalledTimes(1);\n    });\n\n    it('should log an error if an exception is thrown', () => {\n      const error = new Error('error');\n      jest.spyOn(Sentry, 'captureMessage').mockImplementation(() => {\n        throw error;\n      });\n      const spy = jest.spyOn(Logger, 'error');\n\n      SERVICE.verbose('message');\n\n      expect(spy).toHaveBeenCalledWith(error, SentryService.name);\n      expect(spy).toHaveBeenCalledTimes(1);\n    });\n  });\n});\n"]}