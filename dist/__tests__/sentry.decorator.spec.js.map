{"version":3,"file":"sentry.decorator.spec.js","sourceRoot":"/","sources":["__tests__/sentry.decorator.spec.ts"],"names":[],"mappings":";;;;;;;;;;;;;;AAAA,6CAAsD;AACtD,2CAA4C;AAE5C,8CAA6C;AAC7C,oDAAgD;AAChD,sDAAkD;AAElD,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,IAAI,MAAqB,CAAC;IAC1B,IACM,WAAW,GADjB,MACM,WAAW;QACf,YAAmD,MAAqB;YAArB,WAAM,GAAN,MAAM,CAAe;QAAG,CAAC;KAC7E,CAAA;IAFK,WAAW;QADhB,IAAA,mBAAU,GAAE;QAES,WAAA,IAAA,yBAAY,GAAE,CAAA;yCAAyB,8BAAa;OADpE,WAAW,CAEhB;IAED,SAAS,CAAC,KAAK,IAAI,EAAE;QACnB,MAAM,GAAG,MAAM,cAAI,CAAC,mBAAmB,CAAC;YACtC,OAAO,EAAE;gBACP,4BAAY,CAAC,OAAO,CAAC;oBACnB,GAAG,EAAE,OAAO,CAAC,GAAG,CAAC,UAAU;oBAC3B,KAAK,EAAE,IAAI;oBACX,WAAW,EAAE,aAAa;oBAC1B,aAAa,EAAE;wBACb,SAAS,EAAE,CAAC,OAAO,CAAC;qBACrB;iBACF,CAAC;aACH;YACD,SAAS,EAAE,CAAC,WAAW,CAAC;SACzB,CAAC,CAAC,OAAO,EAAE,CAAC;IACf,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,KAAK,IAAI,EAAE;QAClB,MAAM,OAAO,GAAG,MAAM,CAAC,GAAG,CAAC,8BAAa,CAAC,CAAC;QAC1C,MAAM,OAAO,CAAC,QAAQ,EAAE,CAAC,KAAK,EAAE,CAAC;QACjC,MAAM,MAAM,EAAE,KAAK,EAAE,CAAC;IACxB,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,qDAAqD,EAAE,GAAG,EAAE;QACnE,EAAE,CAAC,iCAAiC,EAAE,GAAG,EAAE;YACzC,MAAM,WAAW,GAAG,MAAM,CAAC,GAAG,CAAC,WAAW,CAAC,CAAC;YAC5C,MAAM,CAAC,WAAW,CAAC,CAAC,cAAc,CAAC,QAAQ,CAAC,CAAC;YAC7C,MAAM,CAAC,WAAW,CAAC,MAAM,CAAC,CAAC,cAAc,CAAC,8BAAa,CAAC,CAAC;QAC3D,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","sourcesContent":["import { Test, TestingModule } from '@nestjs/testing';\nimport { Injectable } from '@nestjs/common';\n\nimport { InjectSentry } from '../decorators';\nimport { SentryModule } from '../sentry.module';\nimport { SentryService } from '../sentry.service';\n\ndescribe('InjectSentry', () => {\n  let MODULE: TestingModule;\n  @Injectable()\n  class TestService {\n    public constructor(@InjectSentry() public readonly client: SentryService) {}\n  }\n\n  beforeAll(async () => {\n    MODULE = await Test.createTestingModule({\n      imports: [\n        SentryModule.forRoot({\n          dsn: process.env.SENTRY_DNS,\n          debug: true,\n          environment: 'development',\n          loggerOptions: {\n            logLevels: ['debug'],\n          },\n        }),\n      ],\n      providers: [TestService],\n    }).compile();\n  });\n\n  afterAll(async () => {\n    const service = MODULE.get(SentryService);\n    await service.instance().flush();\n    await MODULE?.close();\n  });\n\n  describe('when using @InjectSentry() in a service constructor', () => {\n    it('should inject the sentry client', () => {\n      const testService = MODULE.get(TestService);\n      expect(testService).toHaveProperty('client');\n      expect(testService.client).toBeInstanceOf(SentryService);\n    });\n  });\n});\n"]}