{"version":3,"file":"sentry.interceptor.spec.js","sourceRoot":"/","sources":["__tests__/sentry.interceptor.spec.ts"],"names":[],"mappings":"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","sourcesContent":["import { ExecutionContext, CallHandler } from '@nestjs/common';\nimport { of } from 'rxjs';\nimport { SentryInterceptor } from '../sentry.interceptor';\n\ndescribe('SentryInterceptor', () => {\n  it('should call next handle method', () => {\n    const interceptor = new SentryInterceptor();\n    const context = {} as ExecutionContext;\n    const next = {\n      handle: jest.fn().mockReturnValue(of('test')),\n    } as CallHandler;\n    interceptor.intercept(context, next).subscribe();\n    expect(next.handle).toHaveBeenCalled();\n  });\n\n  it('should return true if no filters are provided', () => {\n    const interceptor = new SentryInterceptor();\n\n    const exception = new Error('Test error');\n    expect(interceptor.shouldReport(exception)).toBe(true);\n  });\n\n  it('should return false if a filter matches the exception and returns false', () => {\n    const interceptor = new SentryInterceptor({\n      filters: [\n        {\n          type: Error,\n          filter: (exception: Error) => exception.message === 'Test error',\n        },\n      ],\n    });\n\n    const exception = new Error('Test error');\n    expect(interceptor.shouldReport(exception)).toBe(false);\n  });\n\n  it('should return true if a filter matches the exception and returns true', () => {\n    const interceptor = new SentryInterceptor({\n      filters: [\n        {\n          type: Error,\n          filter: (exception: Error) => exception.message !== 'Test error',\n        },\n      ],\n    });\n\n    const exception = new Error('Test error');\n    expect(interceptor.shouldReport(exception)).toBe(true);\n  });\n\n  it('should return true if no filter matches the exception', () => {\n    const interceptor = new SentryInterceptor({\n      filters: [\n        {\n          type: SyntaxError,\n          filter: (exception: Error) => exception.message !== 'Test error',\n        },\n      ],\n    });\n\n    const exception = new Error('Test error');\n    expect(interceptor.shouldReport(exception)).toBe(true);\n  });\n\n  it('should correctly filter exceptions based on string array filter', () => {\n    const interceptor = new SentryInterceptor({\n      filters: [\n        {\n          type: ['Error', 'TestError'],\n        },\n      ],\n    });\n\n    const reportException = new Error('Test error');\n    expect(interceptor.shouldReport(reportException)).toBe(true);\n\n    const notReportException = new Error('TestError');\n    expect(interceptor.shouldReport(notReportException)).toBe(false);\n  });\n});\n"]}