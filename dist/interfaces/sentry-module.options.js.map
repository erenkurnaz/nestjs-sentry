{"version":3,"file":"sentry-module.options.js","sourceRoot":"/","sources":["interfaces/sentry-module.options.ts"],"names":[],"mappings":"","sourcesContent":["import {\n  ConsoleLoggerOptions,\n  InjectionToken,\n  LoggerService,\n  OptionalFactoryDependency,\n} from '@nestjs/common';\nimport { Integration, Options } from '@sentry/types';\nimport { ModuleMetadata, Type } from '@nestjs/common/interfaces';\n\nexport interface SentryCloseOptions {\n  enabled: boolean;\n  timeout?: number;\n}\n\nexport interface LoggingOptions {\n  logger?: LoggerService | null;\n  loggerOptions?: ConsoleLoggerOptions;\n}\n\nexport type SentryModuleOptions = Omit<Options, 'integrations'> & {\n  integrations?: Integration[];\n  close?: SentryCloseOptions;\n  prefix?: string;\n} & LoggingOptions;\n\nexport interface SentryOptionsFactory {\n  createSentryModuleOptions(): Promise<SentryModuleOptions> | SentryModuleOptions;\n}\n\nexport interface SentryModuleAsyncOptions extends Pick<ModuleMetadata, 'imports'> {\n  inject?: Array<InjectionToken | OptionalFactoryDependency> | never;\n  useClass?: Type<SentryOptionsFactory>;\n  useExisting?: Type<SentryOptionsFactory>;\n  useFactory?: (...args: unknown[]) => Promise<SentryModuleOptions> | SentryModuleOptions;\n}\n"]}